import os
import aiohttp
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.types import WebAppInfo
from bot.keyboards import get_main_menu, get_report_menu, get_period_menu

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.\n\n"
        "üéØ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(welcome_text, reply_markup=get_main_menu())


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/dashboard - –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥\n"
        "/report - –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤\n"
        "/demo - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await message.answer(help_text, reply_markup=get_main_menu())


@router.message(Command("dashboard"))
async def cmd_dashboard(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dashboard"""
    webapp_url = os.getenv("WEBAPP_URL", "https://example.com")
    await message.answer(
        "üìä –û—Ç–∫—Ä—ã–≤–∞—é –¥–∞—à–±–æ—Ä–¥...\n"
        "(–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Mini App)"
    )


@router.message(Command("report"))
async def cmd_report(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    await message.answer(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_report_menu()
    )


@router.message(Command("demo"))
async def cmd_demo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /demo"""
    await message.answer(
        "üéØ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è API –∏ –ë–î)"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "open_dashboard")
async def callback_open_dashboard(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    await callback.message.answer(
        "üìä –î–∞—à–±–æ—Ä–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Mini App!"
    )
    await callback.answer()


@router.callback_query(F.data == "report_today")
async def callback_report_today(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await callback.message.answer(
        "üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è...\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤)"
    )
    await callback.answer()


@router.callback_query(F.data == "report_month")
async def callback_report_month(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"""
    await callback.message.answer(
        "üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü...\n"
        "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤)"
    )
    await callback.answer()


@router.callback_query(F.data == "demo_mode")
async def callback_demo_mode(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
    telegram_id = callback.from_user.id
    username = callback.from_user.username
    first_name = callback.from_user.first_name

    api_url = os.getenv("API_URL", "http://localhost:8000")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{api_url}/api/demo/{telegram_id}",
                params={"username": username, "first_name": first_name}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    await callback.message.answer(
                        f"üéØ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                        f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {data['count']} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
                        f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —Å—É–º–º—ã\n"
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç!"
                    )
                    await callback.answer("–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
                else:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö")
                    await callback.answer()
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer()


@router.callback_query(F.data == "report_pdf")
async def callback_report_pdf(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
    telegram_id = callback.from_user.id
    api_url = os.getenv("API_URL", "http://localhost:8000")

    await callback.message.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await callback.answer()

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/reports/{telegram_id}/pdf") as response:
                if response.status == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    content = await response.read()
                    file_path = f"/tmp/report_{telegram_id}.pdf"
                    with open(file_path, 'wb') as f:
                        f.write(content)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    document = FSInputFile(file_path)
                    await callback.message.answer_document(
                        document,
                        caption="üìÑ –í–∞—à PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
                    )

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(file_path)
                else:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "report_excel")
async def callback_report_excel(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞"""
    telegram_id = callback.from_user.id
    api_url = os.getenv("API_URL", "http://localhost:8000")

    await callback.message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await callback.answer()

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/reports/{telegram_id}/excel") as response:
                if response.status == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    content = await response.read()
                    file_path = f"/tmp/report_{telegram_id}.xlsx"
                    with open(file_path, 'wb') as f:
                        f.write(content)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    document = FSInputFile(file_path)
                    await callback.message.answer_document(
                        document,
                        caption="üìä –í–∞—à Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
                    )

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(file_path)
                else:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "back_main")
async def callback_back_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("period_"))
async def callback_period(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    period = callback.data.split("_")[1]
    period_names = {
        "today": "—Å–µ–≥–æ–¥–Ω—è",
        "yesterday": "–≤—á–µ—Ä–∞",
        "week": "–Ω–µ–¥–µ–ª—é",
        "month": "–º–µ—Å—è—Ü"
    }
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {period_names.get(period, period)}\n"
        "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç..."
    )
    await callback.answer()
